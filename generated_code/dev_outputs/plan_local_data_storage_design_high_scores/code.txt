// Editor/Tests/HighScoreServiceTests.cs
using NUnit.Framework;
using Moq;
using HighScoreSystem.Services;
using HighScoreSystem.Data;
using HighScoreSystem.Models;
using System.Collections.Generic;
using System.Linq;

public class HighScoreServiceTests
{
    private Mock<IDataStorage<HighScores>> _mockStorage;
    private HighScoreService _service;

    [SetUp]
    public void Setup()
    {
        _mockStorage = new Mock<IDataStorage<HighScores>>();
        
        // Setup mock to return an empty list of scores by default
        _mockStorage.Setup(s => s.Load()).Returns(new HighScores());
        
        _service = new HighScoreService(_mockStorage.Object);
    }

    [Test]
    public void AddScore_WhenListIsEmpty_AddsScoreAndSaves()
    {
        // Act
        _service.AddScore("Player1", 90.5f);

        // Assert
        var scores = _service.GetHighScores(1);
        Assert.AreEqual(1, scores.Count);
        Assert.AreEqual("Player1", scores[0].playerName);
        _mockStorage.Verify(s => s.Save(It.IsAny<HighScores>()), Times.Once);
    }

    [Test]
    public void GetHighScores_ReturnsScoresSortedByLapTime()
    {
        // Arrange
        var initialScores = new HighScores
        {
            scores = new List<HighScoreEntry>
            {
                new HighScoreEntry { playerName = "Slo", lapTime = 100.0f },
                new HighScoreEntry { playerName = "Fst", lapTime = 80.0f }
            }
        };
        _mockStorage.Setup(s => s.Load()).Returns(initialScores);
        _service = new HighScoreService(_mockStorage.Object);

        // Act
        var scores = _service.GetHighScores(2);

        // Assert
        Assert.AreEqual(2, scores.Count);
        Assert.AreEqual("Fst", scores[0].playerName);
        Assert.AreEqual(80.0f, scores[0].lapTime);
        Assert.AreEqual("Slo", scores[1].playerName);
    }

    [Test]
    public void IsHighScore_WhenScoreIsBetterThanWorst_ReturnsTrue()
    {
        // Arrange
        var scoresList = new List<HighScoreEntry>();
        for (int i = 0; i < 100; i++)
        {
            scoresList.Add(new HighScoreEntry { playerName = $"P{i}", lapTime = 100 + i });
        }
        _mockStorage.Setup(s => s.Load()).Returns(new HighScores { scores = scoresList });
        _service = new HighScoreService(_mockStorage.Object);

        // Act
        bool result = _service.IsHighScore(99.0f); // Better than the worst score of 199

        // Assert
        Assert.IsTrue(result);
    }

    [Test]
    public void IsHighScore_WhenListIsNotFull_ReturnsTrue()
    {
        // Act
        bool result = _service.IsHighScore(200.0f);

        // Assert
        Assert.IsTrue(result);
    }
}