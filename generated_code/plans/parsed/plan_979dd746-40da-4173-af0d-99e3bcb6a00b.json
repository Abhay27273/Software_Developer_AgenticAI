{
  "id": "979dd746-40da-4173-af0d-99e3bcb6a00b",
  "title": "Classic Snake Game Web Application",
  "description": "A comprehensive plan to develop, test, and deploy a classic Snake game as a web application. The game will feature a controllable snake, food items, a scoring system, and game-over conditions. The project will be built using modern web technologies (HTML5 Canvas, Vanilla JavaScript) and deployed for public access via a static hosting provider.",
  "tasks": [
    {
      "id": "task_001",
      "title": "Setup Git Repository and Version Control",
      "description": "Initialize a Git repository for the project on a platform like GitHub. Establish branching strategy (e.g., main, develop, feature branches). - Acceptance Criteria: - Repository is created and accessible to the team. - A `main` and `develop` branch exist. - A clear branching model is documented in the README.",
      "priority": 10,
      "status": "completed",
      "dependencies": [],
      "estimated_hours": 1.0,
      "complexity": "simple",
      "agent_type": "ops_agent",
      "created_at": "2025-08-15T14:32:27.051480",
      "metadata": {}
    },
    {
      "id": "task_002",
      "title": "Requirements Gathering & Scope Definition",
      "description": "Define the core features and rules of the Snake game. - Acceptance Criteria: - Game rules are documented (snake growth, scoring, game over conditions). - Core features are listed: player control, food, score display, start/end screens. - Boundaries are defined (e.g., does the snake wrap around the screen or die?).",
      "priority": 10,
      "status": "failed",
      "dependencies": [],
      "estimated_hours": 2.0,
      "complexity": "simple",
      "agent_type": "dev_agent",
      "created_at": "2025-08-15T14:32:31.069410",
      "metadata": {}
    },
    {
      "id": "task_003",
      "title": "Technology Stack Selection",
      "description": "Formally decide on the technologies for building the game. The default will be HTML5, CSS3, and Vanilla JavaScript. - Acceptance Criteria: - Final technology stack (HTML, CSS, JS) is confirmed. - Decision on any build tools (e.g., Vite for dev server) is made. - Rationale for choices is documented.",
      "priority": 10,
      "status": "failed",
      "dependencies": [
        "task_002"
      ],
      "estimated_hours": 1.0,
      "complexity": "simple",
      "agent_type": "dev_agent",
      "created_at": "2025-08-15T14:33:21.064594",
      "metadata": {}
    },
    {
      "id": "task_004",
      "title": "High-Level Architecture Planning",
      "description": "Plan the overall structure of the application, including the game loop, state management, and rendering logic. - Acceptance Criteria: - A diagram or document outlines the main components (Game Engine, Renderer, Input Handler, State Manager). - The core game loop mechanism (e.g., `requestAnimationFrame`) is chosen. - File and folder structure is defined.",
      "priority": 10,
      "status": "failed",
      "dependencies": [
        "task_003"
      ],
      "estimated_hours": 3.0,
      "complexity": "medium",
      "agent_type": "dev_agent",
      "created_at": "2025-08-15T14:33:31.475010",
      "metadata": {}
    },
    {
      "id": "task_005",
      "title": "Game Logic and State Data Modeling",
      "description": "Design the data structures for all game entities. - Acceptance Criteria: - Data structure for the snake (array of coordinates) is defined. - Data structure for food (coordinates) is defined. - Game state object (score, speed, isGameOver) is defined.",
      "priority": 10,
      "status": "failed",
      "dependencies": [
        "task_004"
      ],
      "estimated_hours": 4.0,
      "complexity": "medium",
      "agent_type": "dev_agent",
      "created_at": "2025-08-15T14:33:36.403959",
      "metadata": {}
    },
    {
      "id": "task_006",
      "title": "UI/UX Wireframing for Game Screens",
      "description": "Create simple wireframes for the main game screen, start menu, and game over screen. - Acceptance Criteria: - A wireframe shows the layout of the game board, score display, and other UI elements. - A wireframe for the 'Start Game' screen is created. - A wireframe for the 'Game Over' screen with final score and a 'Play Again' button is created.",
      "priority": 8,
      "status": "failed",
      "dependencies": [
        "task_002"
      ],
      "estimated_hours": 4.0,
      "complexity": "simple",
      "agent_type": "dev_agent",
      "created_at": "2025-08-15T14:33:41.334490",
      "metadata": {}
    },
    {
      "id": "task_007",
      "title": "Setup Project Structure and HTML Canvas",
      "description": "Create the initial project files and set up the HTML5 Canvas element which will serve as the game's display. - Acceptance Criteria: - `index.html`, `style.css`, and `game.js` files are created. - The `index.html` file contains a `<canvas>` element with a defined ID. - The project is runnable in a local development server.",
      "priority": 10,
      "status": "failed",
      "dependencies": [
        "task_004"
      ],
      "estimated_hours": 2.0,
      "complexity": "simple",
      "agent_type": "dev_agent",
      "created_at": "2025-08-15T14:33:46.299494",
      "metadata": {}
    },
    {
      "id": "task_008",
      "title": "Implement Game Board Rendering",
      "description": "Write the code to draw the game board or grid on the canvas. - Acceptance Criteria: - A function exists to clear the canvas on each frame. - A function exists to draw the background and/or grid lines. - The board renders correctly when the page loads.",
      "priority": 8,
      "status": "failed",
      "dependencies": [
        "task_007"
      ],
      "estimated_hours": 3.0,
      "complexity": "simple",
      "agent_type": "dev_agent",
      "created_at": "2025-08-15T14:33:51.240462",
      "metadata": {}
    },
    {
      "id": "task_009",
      "title": "Implement Snake Rendering and Data Structure",
      "description": "Implement the snake's data structure and the logic to draw it on the canvas. - Acceptance Criteria: - A snake object based on the data model from task_005 is implemented. - A function can draw the snake on the canvas based on its current coordinates. - The initial snake appears at a starting position.",
      "priority": 10,
      "status": "failed",
      "dependencies": [
        "task_005",
        "task_008"
      ],
      "estimated_hours": 4.0,
      "complexity": "medium",
      "agent_type": "dev_agent",
      "created_at": "2025-08-15T14:33:56.201323",
      "metadata": {}
    },
    {
      "id": "task_010",
      "title": "Implement Game Loop and Snake Movement Logic",
      "description": "Create the core game loop that updates the game state and re-renders the canvas. Implement the logic for snake movement. - Acceptance Criteria: - A game loop is running using `requestAnimationFrame`. - The snake's position is updated on each tick of the game loop. - The snake moves continuously in a single direction across the board.",
      "priority": 10,
      "status": "failed",
      "dependencies": [
        "task_009"
      ],
      "estimated_hours": 6.0,
      "complexity": "medium",
      "agent_type": "dev_agent",
      "created_at": "2025-08-15T14:34:01.193700",
      "metadata": {}
    },
    {
      "id": "task_011",
      "title": "Implement Player Input Handling (Keyboard Controls)",
      "description": "Capture keyboard events (arrow keys) to change the snake's direction. - Acceptance Criteria: - The game listens for `keydown` events. - Pressing arrow keys updates the snake's direction state. - The snake cannot immediately reverse direction (e.g., from right to left).",
      "priority": 10,
      "status": "failed",
      "dependencies": [
        "task_010"
      ],
      "estimated_hours": 3.0,
      "complexity": "simple",
      "agent_type": "dev_agent",
      "created_at": "2025-08-15T14:34:05.079464",
      "metadata": {}
    },
    {
      "id": "task_012",
      "title": "Implement Food Spawning and Rendering",
      "description": "Create logic to randomly place food on the board and render it. - Acceptance Criteria: - A function spawns food at a random, valid location on the grid. - The food is not spawned on a square occupied by the snake. - The food is correctly rendered on the canvas.",
      "priority": 8,
      "status": "failed",
      "dependencies": [
        "task_008"
      ],
      "estimated_hours": 3.0,
      "complexity": "simple",
      "agent_type": "dev_agent",
      "created_at": "2025-08-15T14:34:09.118559",
      "metadata": {}
    },
    {
      "id": "task_013",
      "title": "Implement Snake-Food Collision and Growth Logic",
      "description": "Detect when the snake's head collides with food. When it does, increase the snake's length and spawn new food. - Acceptance Criteria: - Collision between the snake's head and the food is detected. - The snake's length increases by one segment upon collision. - A new piece of food is spawned after the old one is eaten.",
      "priority": 8,
      "status": "failed",
      "dependencies": [
        "task_010",
        "task_012"
      ],
      "estimated_hours": 4.0,
      "complexity": "medium",
      "agent_type": "dev_agent",
      "created_at": "2025-08-15T14:34:17.819942",
      "metadata": {}
    }
  ],
  "created_at": "2025-08-15T14:32:27.051383",
  "total_estimated_hours": null,
  "complexity_distribution": {}
}